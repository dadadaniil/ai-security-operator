from pymetasploit3.msfrpc import MsfRpcClient
import time
import os
import socket
import json
import sys
import traceback
from dotenv import load_dotenv

# Enable more verbose debugging
DEBUG = True

def debug_print(message):
    """Print debug messages if DEBUG is enabled"""
    if DEBUG:
        print(f"[DEBUG] {message}")

def wait_for_service(host, port, max_retries=30, delay=5):
    """Wait for a service to be available"""
    debug_print(f"Checking if service is available at {host}:{port}")
    for i in range(max_retries):
        try:
            print(f"Attempting to connect to {host}:{port} (attempt {i+1}/{max_retries})...")
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(2)
            sock.connect((host, port))
            sock.close()
            print(f"Service at {host}:{port} is available!")
            return True
        except (socket.timeout, socket.error) as e:
            print(f"Connection attempt failed: {str(e)}")
            if i < max_retries - 1:
                print(f"Retrying in {delay} seconds...")
                time.sleep(delay)
    
    print(f"Could not connect to {host}:{port} after {max_retries} attempts")
    return False

def connect_to_msf():
    """Connect to Metasploit RPC server"""
    msf_host = os.getenv('MSF_HOST', 'metasploit')
    msf_port = int(os.getenv('MSF_PORT', 55553))
    msf_user = os.getenv('MSF_USER', 'msf')
    msf_pass = os.getenv('MSF_PASS', 'msf')
    
    debug_print(f"Connection parameters: host={msf_host}, port={msf_port}, user={msf_user}, pass={msf_pass}")
    
    # Wait for the RPC service to be available
    if not wait_for_service(msf_host, msf_port):
        return None
    
    try:
        debug_print("Creating MsfRpcClient...")
        # Connect to the Metasploit RPC server
        client = MsfRpcClient(msf_pass, 
                            server=msf_host,
                            port=msf_port, 
                            username=msf_user,
                            ssl=False)
        print("Successfully connected to Metasploit RPC!")
        return client
    except Exception as e:
        print(f"Failed to connect to Metasploit RPC: {str(e)}")
        print("Full exception details:")
        traceback.print_exc()
        return None

def list_modules(client, module_type='exploits', limit=10):
    """List available modules with a limit"""
    print(f"\nAvailable {module_type} (showing first {limit}):")
    try:
        count = 0
        for module in getattr(client.modules, module_type):
            print(f"- {module}")
            count += 1
            if count >= limit:
                print(f"... (more {module_type} available)")
                break
    except Exception as e:
        print(f"Error listing modules: {str(e)}")
        traceback.print_exc()

def run_scanner(client, target_host):
    """Run a simple port scanner against a target"""
    print(f"\nRunning port scanner against {target_host}...")
    
    try:
        # Create scanner module directly
        debug_print("Creating scanner module...")
        scanner = client.modules.use('auxiliary', 'scanner/portscan/tcp')
        scanner['RHOSTS'] = target_host
        scanner['PORTS'] = '80,443,22,21'
        
        # Execute the module
        debug_print("Executing scanner module...")
        job_id = scanner.execute()
        debug_print(f"Job ID: {job_id}")
        
        # Monitor job status
        print("Scan started. Monitoring for results...")
        
        # Wait a bit for the job to start
        time.sleep(5)
        
        # Check job status for a while
        timeout = 60
        start_time = time.time()
        while (time.time() - start_time) < timeout:
            # Get jobs list
            jobs = client.jobs.list
            debug_print(f"Current jobs: {jobs}")
            
            # If our job is not in the list anymore, it's completed
            if str(job_id['job_id']) not in jobs:
                print("Scan completed!")
                break
                
            print("Scan still running...")
            time.sleep(5)
        
        print("Port scan completed!")
    except Exception as e:
        print(f"Error running scanner: {str(e)}")
        traceback.print_exc()

def main():
    print("Starting Metasploit exploiter...")
    # Print environment variables for debugging
    debug_print("Environment variables:")
    for key, value in os.environ.items():
        if "MSF" in key or "TARGET" in key:
            debug_print(f"  {key}={value}")
    
    print("Waiting for Metasploit to be ready...")
    time.sleep(30)  # Increase wait time
    
    client = connect_to_msf()
    if client:
        try:
            # Test client with basic info call
            debug_print("Testing client with version info...")
            version = client.core.version
            debug_print(f"Metasploit version: {version}")
            
            # List a few available modules
            list_modules(client, module_type='exploits', limit=5)
            
            # Run a port scanner against an example target
            target = os.getenv('TARGET_HOST', '8.8.8.8')
            run_scanner(client, target)
        except Exception as e:
            print(f"Error in main workflow: {str(e)}")
            traceback.print_exc()
    else:
        print("Failed to connect to Metasploit RPC. Exiting.")
        sys.exit(1)

if __name__ == "__main__":
    main() 