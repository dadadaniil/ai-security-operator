import logging
import time
import uvicorn
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from app.core.config import settings
from app.api.endpoints import router as api_router
from app.core.msf_manager import msf_manager, ConnectionError

# Configure logging
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger("main")

# Create FastAPI app
app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    description="API for interacting with Metasploit Framework"
)

# Configure CORS
if settings.BACKEND_CORS_ORIGINS:
    app.add_middleware(
        CORSMiddleware,
        allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

# Include API router
app.include_router(api_router, prefix=settings.API_V1_STR)

@app.on_event("startup")
async def startup_event():
    """Initialize connections and services on startup"""
    logger.info("Starting Metasploit Exploiter API")
    
    # Connect to Metasploit RPC
    logger.info("Connecting to Metasploit RPC server...")
    retry_attempts = 3
    
    for attempt in range(retry_attempts):
        try:
            # Attempt to connect
            msf_manager.connect()
            logger.info("Successfully connected to Metasploit RPC server")
            break
        except ConnectionError as e:
            if attempt < retry_attempts - 1:
                wait_time = 10
                logger.warning(f"Failed to connect to Metasploit RPC server: {str(e)}. Retrying in {wait_time} seconds...")
                time.sleep(wait_time)
            else:
                logger.error(f"Failed to connect to Metasploit RPC server after {retry_attempts} attempts: {str(e)}")
                # We'll continue running the API even if Metasploit connection fails
                # The API endpoints will handle connection errors
    
    logger.info(f"Startup complete. API available at http://{settings.HOST}:{settings.PORT}{settings.API_V1_STR}")

@app.on_event("shutdown")
async def shutdown_event():
    """Clean up resources on shutdown"""
    logger.info("Shutting down Metasploit Exploiter API")
    
    # Disconnect from Metasploit RPC
    msf_manager.disconnect()
    logger.info("Disconnected from Metasploit RPC server")

@app.get("/")
async def root():
    """Root endpoint returning API information"""
    return {
        "name": settings.PROJECT_NAME,
        "version": settings.VERSION,
        "api_prefix": settings.API_V1_STR,
        "docs_url": "/docs",
    }

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=False,
        log_level=settings.LOG_LEVEL.lower(),
    ) 