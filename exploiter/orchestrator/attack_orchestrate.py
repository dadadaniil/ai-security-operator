from exploiter import AttackPlanExecutionReport, StepExecutionResult, AttackPlan, AttackStep
from exploiter.utils.attack_strategy_factory import AttackStrategyFactory
from datetime import datetime
from typing import List

class AttackOrchestrate:
    def __init__(self, strategy_factory: AttackStrategyFactory):
        self.strategy_factory = strategy_factory

    def execute_plan(self, plan: AttackPlan) -> AttackPlanExecutionReport:
        step_results: List[StepExecutionResult] = []
        start_time = datetime.now()
        overall_status = "success"
        for step in plan.steps:
            result = self._execute_single_step(step)
            step_results.append(result)
            if result.status != "success":
                overall_status = "failure"
        end_time = datetime.now()
        return AttackPlanExecutionReport(
            plan_id=plan.plan_id,
            overall_status=overall_status,
            step_results=step_results,
            start_time=start_time,
            end_time=end_time
        )

    def _execute_single_step(self, step: AttackStep) -> StepExecutionResult:
        strategy = self.strategy_factory.get_strategy(step.tool_to_use)
        return strategy.execute(
            step_id=step.step_id,
            instructions=step.exploit_instructions,
            expected_criteria=step.expected_result_criteria
        ) 