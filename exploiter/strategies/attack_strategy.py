from abc import ABC, abstractmethod
from typing import Dict

from exploiter import StepExecutionResult
from exploiter.core import BaseExploitInstructions, MetasploitInstructions, FuzzerInstructions


class IAttackStrategy(ABC):
    @abstractmethod
    def execute(self, step_id: str, instructions: BaseExploitInstructions, expected_criteria: Dict) -> StepExecutionResult:
        pass

class MetasploitAttackStrategy(IAttackStrategy):
    def execute(self, step_id: str, instructions: MetasploitInstructions, expected_criteria: Dict) -> StepExecutionResult:
        # Implement Metasploit execution logic here
        pass

class FuzzerAttackStrategy(IAttackStrategy):
    def execute(self, step_id: str, instructions: FuzzerInstructions, expected_criteria: Dict) -> StepExecutionResult:
        # Implement Fuzzer execution logic here
        pass

class CustomHttpAttackStrategy(IAttackStrategy):
    def execute(self, step_id: str, instructions: BaseExploitInstructions, expected_criteria: Dict) -> StepExecutionResult:
        # Implement Custom HTTP execution logic here
        pass 