from pymetasploit3.msfrpc import MsfRpcClient
import time
import os
import socket
import logging
from typing import Optional
from dotenv import load_dotenv

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("msf_manager")

class ConnectionError(Exception):
    """Exception raised when connection to Metasploit fails"""
    pass

class MsfManager:
    """Singleton class to manage Metasploit RPC connection"""
    _instance = None
    _client = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(MsfManager, cls).__new__(cls)
            # Initialize the instance
            cls._instance._initialized = False
        return cls._instance
    
    def __init__(self):
        # Only initialize once
        if self._initialized:
            return
        
        # Load environment variables
        load_dotenv()
        
        self.host = os.getenv('MSF_HOST', 'metasploit')
        self.port = int(os.getenv('MSF_PORT', 55553))
        self.username = os.getenv('MSF_USER', 'msf')
        self.password = os.getenv('MSF_PASS', 'msf')
        
        # Connection state
        self._client = None
        self.connected = False
        self._initialized = True
        self.connection_retries = 5
        self.retry_delay = 5
        
        logger.info("MsfManager initialized with settings - HOST: %s, PORT: %d", self.host, self.port)
    
    def wait_for_service(self, max_retries=30, delay=5) -> bool:
        """Wait for the Metasploit RPC service to be available"""
        logger.info("Checking if Metasploit RPC service is available at %s:%d", self.host, self.port)
        
        for i in range(max_retries):
            try:
                logger.info("Connection attempt %d/%d", i+1, max_retries)
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(2)
                sock.connect((self.host, self.port))
                sock.close()
                logger.info("Service at %s:%d is available!", self.host, self.port)
                return True
            except (socket.timeout, socket.error) as e:
                logger.warning("Connection attempt failed: %s", str(e))
                if i < max_retries - 1:
                    logger.info("Retrying in %d seconds...", delay)
                    time.sleep(delay)
        
        logger.error("Could not connect to %s:%d after %d attempts", self.host, self.port, max_retries)
        return False
    
    def connect(self, force_reconnect=False) -> MsfRpcClient:
        """Connect to Metasploit RPC server"""
        # Return existing client if already connected
        if self._client is not None and not force_reconnect:
            logger.debug("Using existing Metasploit RPC connection")
            return self._client
        
        # Wait for service to be available
        if not self.wait_for_service():
            raise ConnectionError(f"Metasploit RPC service at {self.host}:{self.port} is not available")
        
        # Try to connect multiple times if needed
        for attempt in range(self.connection_retries):
            try:
                logger.info("Creating MsfRpcClient (attempt %d/%d)...", attempt+1, self.connection_retries)
                
                # Connect to the Metasploit RPC server
                self._client = MsfRpcClient(
                    password=self.password,
                    server=self.host,
                    port=self.port,
                    username=self.username,
                    ssl=False
                )
                
                # Verify connection with a simple operation
                version = self._client.core.version
                logger.info("Successfully connected to Metasploit RPC! Version: %s", version.get('version', 'Unknown'))
                
                self.connected = True
                return self._client
                
            except Exception as e:
                logger.error("Connection attempt %d failed: %s", attempt+1, str(e))
                if attempt < self.connection_retries - 1:
                    logger.info("Retrying in %d seconds...", self.retry_delay)
                    time.sleep(self.retry_delay)
        
        # If we get here, all connection attempts failed
        self.connected = False
        raise ConnectionError(f"Failed to connect to Metasploit RPC after {self.connection_retries} attempts")
    
    def get_client(self) -> MsfRpcClient:
        """Get the Metasploit RPC client, connecting if necessary"""
        if not self._client or not self.connected:
            return self.connect()
        return self._client
    
    def disconnect(self) -> None:
        """Disconnect from Metasploit RPC server"""
        if self._client:
            logger.info("Disconnecting from Metasploit RPC server")
            self._client = None
            self.connected = False

# Global instance
msf_manager = MsfManager() 