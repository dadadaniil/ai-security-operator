from fastapi import APIRouter, HTTPException

from exploiter.orchestrator.attack_orchestrate import AttackOrchestrate
from exploiter.utils.attack_strategy_factory import AttackStrategyFactory
from ..models import AttackPlanRequest, AttackPlanExecutionReportModel, ErrorResponse
from ..converters.attack import AttackPlanConverter, ExecutionReportConverter

router = APIRouter(prefix="/attack", tags=["Attack Operations"])

strategy_factory = AttackStrategyFactory()
orchestrator = AttackOrchestrate(strategy_factory)
plan_converter = AttackPlanConverter()
report_converter = ExecutionReportConverter()

@router.post(
    "/execute",
    response_model=AttackPlanExecutionReportModel,
    responses={400: {"model": ErrorResponse}, 500: {"model": ErrorResponse}},
    summary="Execute an attack plan"
)
async def execute_attack_plan(plan_request: AttackPlanRequest):
    try:
        attack_plan = plan_converter.to_domain(plan_request)
        report = orchestrator.execute_plan(attack_plan)
        return report_converter.to_api(report)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e)) 