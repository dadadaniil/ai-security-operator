from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional
from datetime import datetime

class MetasploitInstructionsModel(BaseModel):
    module_name: str

class FuzzerInstructionsModel(BaseModel):
    fuzzer_type: str
    config: Dict[str, Any]

class AttackStepModel(BaseModel):
    step_id: str
    description: str
    tool_to_use: str
    exploit_instructions: Dict[str, Any]  # Will be converted to appropriate instruction type
    expected_result_criteria: Dict[str, Any]

class AttackPlanRequest(BaseModel):
    plan_id: str
    target_info: Dict[str, Any]
    steps: List[AttackStepModel]

class StepExecutionResultModel(BaseModel):
    step_id: str
    tool_used: str
    status: str
    message: str
    raw_request: Optional[Any] = None
    raw_response: Optional[Any] = None
    extracted_data: Dict[str, Any]
    execution_time_ms: float

class AttackPlanExecutionReportModel(BaseModel):
    plan_id: str
    overall_status: str
    step_results: List[StepExecutionResultModel]
    start_time: datetime
    end_time: datetime

class ErrorResponse(BaseModel):
    error: str
    details: Optional[Dict[str, Any]] = None 