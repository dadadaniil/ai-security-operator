from typing import Dict, Any
from pydantic import BaseModel
from ..models import (
    AttackPlanRequest,
    AttackPlanExecutionReportModel,
    StepExecutionResultModel
)
from exploiter.core.attack_plan import AttackPlan
from exploiter.core.attack_step import AttackStep
from exploiter.core.base_exploit_instructions import MetasploitInstructions, FuzzerInstructions
from exploiter.core.attack_plan_execution_report import AttackPlanExecutionReport
from exploiter.core.step_execution_result import StepExecutionResult
from .base import BaseConverter

class AttackPlanConverter(BaseConverter[AttackPlanRequest, AttackPlan]):
    def to_domain(self, api_model: AttackPlanRequest) -> AttackPlan:
        steps = []
        for step in api_model.steps:
            instructions = self._create_instructions(step.tool_to_use, step.exploit_instructions)
            attack_step = AttackStep(
                step_id=step.step_id,
                description=step.description,
                tool_to_use=step.tool_to_use,
                exploit_instructions=instructions,
                expected_result_criteria=step.expected_result_criteria
            )
            steps.append(attack_step)
        
        return AttackPlan(
            plan_id=api_model.plan_id,
            target_info=api_model.target_info,
            steps=steps
        )

    def _create_instructions(self, tool_type: str, instructions: Dict[str, Any]):
        if tool_type == "metasploit":
            return MetasploitInstructions(module_name=instructions["module_name"])
        elif tool_type == "fuzzer":
            return FuzzerInstructions(
                fuzzer_type=instructions["fuzzer_type"],
                config=instructions["config"]
            )
        raise ValueError(f"Unsupported tool type: {tool_type}")

class ExecutionReportConverter(BaseConverter[AttackPlanExecutionReport, AttackPlanExecutionReportModel]):
    def to_api(self, domain_model: AttackPlanExecutionReport) -> AttackPlanExecutionReportModel:
        return AttackPlanExecutionReportModel(
            plan_id=domain_model.plan_id,
            overall_status=domain_model.overall_status,
            step_results=[
                StepExecutionResultModel(
                    step_id=result.step_id,
                    tool_used=result.tool_used,
                    status=result.status,
                    message=result.message,
                    raw_request=result.raw_request,
                    raw_response=result.raw_response,
                    extracted_data=result.extracted_data,
                    execution_time_ms=result.execution_time_ms
                )
                for result in domain_model.step_results
            ],
            start_time=domain_model.start_time,
            end_time=domain_model.end_time
        ) 