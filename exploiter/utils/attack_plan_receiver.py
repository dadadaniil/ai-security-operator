from exploiter import AttackPlanExecutionReport, AttackPlan
from exploiter.services.attack_orchestrate import AttackOrchestrate

class AttackPlanReceiver:
    def __init__(self, orchestrator: AttackOrchestrate):
        self.orchestrator = orchestrator

    def handle_attack_plan_request(self, plan_json: dict) -> AttackPlanExecutionReport:
        # TODO: Implement robust deserialization from plan_json to AttackPlan and AttackStep objects
        plan = self._deserialize_plan(plan_json)
        return self.orchestrator.execute_plan(plan)

    def _deserialize_plan(self, plan_json: dict) -> AttackPlan:
        # Placeholder for deserialization logic
        # Should convert plan_json to AttackPlan and AttackStep objects
        raise NotImplementedError("Deserialization logic must be implemented.") 