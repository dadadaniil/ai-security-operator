import time
import logging
from typing import Dict, List, Any, Optional
from enum import Enum

from core.msf_manager import msf_manager
from .attack_orchestrate import AttackOrchestrate
from core.config import settings

# Configure logging
logger = logging.getLogger("scanner_service")

class ScannerService:
    """Service for scanning operations using Metasploit"""
    
    def __init__(self):
        self.timeout = settings.DEFAULT_TIMEOUT
    
    def get_available_modules(self, module_type: str = 'exploits', limit: int = 10) -> List[str]:
        """Get a list of available modules of the specified type"""
        logger.info(f"Listing {module_type} modules (limit: {limit})")
        
        try:
            client = msf_manager.get_client()
            modules = []
            
            count = 0
            for module in getattr(client.modules, module_type):
                modules.append(module)
                count += 1
                if limit and count >= limit:
                    break
            
            logger.info(f"Found {len(modules)} {module_type} modules")
            return modules
            
        except Exception as e:
            logger.error(f"Error listing {module_type} modules: {str(e)}")
            raise
    
    def get_module_info(self, module_type: str, module_name: str) -> Dict[str, Any]:
        """Get detailed information about a specific module"""
        logger.info(f"Getting info for {module_type} module: {module_name}")
        
        try:
            client = msf_manager.get_client()
            module = client.modules.use(module_type, module_name)
            
            # Get module details
            info = {
                'name': module_name,
                'description': module.description,
                'options': module.options,
                'required': module.required,
                'missing_required': module.missing_required
            }
            
            # Add target info if available
            if hasattr(module, 'targets') and module.targets:
                info['targets'] = module.targets
                info['default_target'] = module.default_target
            
            # Add payload info if available
            if hasattr(module, 'targetpayloads'):
                info['compatible_payloads'] = module.targetpayloads()
            
            return info
            
        except Exception as e:
            logger.error(f"Error getting info for {module_type} module {module_name}: {str(e)}")
            raise
    
    def run_port_scan(self, target_host: str, ports: str = '80,443,22,21') -> Dict[str, Any]:
        """Run a port scan against a target host"""
        logger.info(f"Starting port scan against {target_host} on ports {ports}")
        
        try:
            client = msf_manager.get_client()
            
            # Create scanner module
            scanner = client.modules.use('auxiliary', 'scanner/portscan/tcp')
            scanner['RHOSTS'] = target_host
            scanner['PORTS'] = ports
            
            # Execute the scan
            logger.info(f"Executing port scanner")
            job = scanner.execute()
            job_id = job.get('job_id')
            logger.info(f"Scan started with job ID: {job_id}")
            
            # Create a console to capture output
            console_result = client.consoles.console()
            console_id = console_result.get('id')
            
            if not console_id:
                logger.error("Failed to create console")
                return {"status": "error", "message": "Failed to create console"}
            
            logger.info(f"Created console with ID: {console_id}")
            
            # Monitor the job and collect results
            results = []
            start_time = time.time()
            
            while time.time() - start_time < self.timeout:
                # Check if job is still running
                if str(job_id) not in client.jobs.list:
                    logger.info(f"Job {job_id} completed")
                    break
                
                # Read console output
                console_data = client.consoles.read(console_id)
                if console_data and 'data' in console_data and console_data['data'].strip():
                    logger.info(f"Received scan data: {console_data['data'].strip()}")
                    results.append(console_data['data'].strip())
                
                time.sleep(2)
            
            # Clean up
            client.consoles.destroy(console_id)
            
            return {
                "status": "completed",
                "target": target_host,
                "ports": ports,
                "results": results,
                "job_id": job_id
            }
            
        except Exception as e:
            logger.error(f"Error running port scan against {target_host}: {str(e)}")
            raise

    def get_metasploit_version(self) -> Dict[str, str]:
        """Get Metasploit version information"""
        logger.info("Getting Metasploit version info")
        
        try:
            client = msf_manager.get_client()
            version = client.core.version
            return version
        except Exception as e:
            logger.error(f"Error getting Metasploit version: {str(e)}")
            raise

# Create a global instance
scanner_service = ScannerService() 